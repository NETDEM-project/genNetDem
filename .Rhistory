t_res<-data.frame(indiv_data$indivs)
t_res<-indiv_info_gen(t_res,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
sort(unique(t_res[[1]][,2]))
t_res<-indiv_info_gen(t_res,ii_tag=NULL,indiv_data=indiv_data,trait="size",trait_type="cov",level_names=NULL,x_type="unif")
t_res<-indiv_info_gen(t_res,ii_tag=NULL,indiv_data=indiv_data,trait="size",trait_type="cov",level_names=NULL,x_dist="unif")
t_res<-data.frame(indiv_data$indivs)
t_res<-indiv_info_gen(t_res,ii_tag=NULL,indiv_data=indiv_data,trait="size",trait_type="cov",level_names=NULL,x_dist="unif")
t_res
sum(t_res[[1]][,2]<0|t_res[[1]][,2]>1)
t_res<-data.frame(indiv_data$indivs)
t_res<-indiv_info_gen(t_res,ii_tag=NULL,indiv_data=indiv_data,trait="size",trait_type="cov",level_names=NULL,x_dist="norm")
t_res<-indiv_info_gen(t_res[[1]],ii_tag=t_res[[2]],indiv_data=indiv_data,trait="size",trait_type="cov",level_names=NULL,x_dist="lnorm")
t_res
t_res<-data.frame(indiv_data$indivs)
t_res<-indiv_info_gen(t_res,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
t_res<-indiv_info_gen(t_res[[1]],ii_tag=t_res[[2]],indiv_data=indiv_data,trait="size",trait_type="cov",level_names=NULL,x_dist="lnorm")
t_res[[1]]
length(t_res[[2]])
devtools::test()
devtools::test()
usethis::use_test("indiv_info_merge")
ii1<-readRDS(test_path("fixtures","indiv_info_1.RDS"))
ii2<-readRDS(test_path("fixtures","indiv_info_2.RDS"))
indiv_info_merge(ii1,ii2)
indiv_info_merge(ii1[[1]],ii2[[2]])
ii1[[1]]
ii1[[2]]
ii1[[1]]
ii2[[1]]
indiv_info_merge(ii1[[1]],ii2[[1]])
merge(ii1[[1]],ii2[[1]])
merge(ii1[[1]],ii2[[1]],by="ID")
pop_info<-population_generation_basic(n=100,ng=100)
indiv_data<-pop_info[[1]]
dist_mat<-pop_info[[2]]
#saveRDS(indiv_data,"tests/testthat/indiv_data_1.RDS")
#saveRDS(dist_mat,"tests/testthat/dist_mat_1.RDS")
indiv_info<-data.frame(indiv_data$indivs)
indiv_info<-indiv_info_gen(indiv_info,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
#saveRDS(indiv_info,"tests/testthat/indiv_info_1.RDS")
effs<-list()
effs[[1]]<-matrix(c(0,0,0,1,1,1,0,0),nr=1,nc=8)
effs[[1]]<-rbind(rep(0,8),effs[[1]])
net_info<-network_generation_covariates(indiv_data,dist_mat,indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=c(2),effs=effs,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
#saveRDS(pop_mat,"tests/testthat/pop_mat_1.RDS")
#saveRDS(pop_net,"tests/testthat/pop_net_1.RDS")
#Generate association data
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=20,
float=0.000000001,pm=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#saveRDS(gbi,"tests/testthat/gbi_1.RDS")
#saveRDS(samp_wind,"tests/testthat/samp_wind_1.RDS")
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.75,pmi=0.9,pci=0.9,
start_obs=1,end_obs=max(samp_wind),interval_obs=2,
start_cap=1,end_cap=4,interval_cap=1)
captured_gbi<-obs_info[[1]]
captured_groups<-obs_info[[2]]
observed_gbi<-obs_info[[3]]
observed_groups<-obs_info[[4]]
#Add survival to initial population
indiv_data<-basic_survival(indiv_data,mps=0.95,lvps=0.5)
#saveRDS(indiv_data,"tests/testthat/indiv_data_1a.RDS")
#Demographic timestep
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=indiv_data,
mps=0.8,lvps=0.5)
prev_data<-indiv_data
indiv_data<-new_info[[1]]
full_indiv_data<-new_info[[2]]
dist_mat<-new_info[[3]]
#saveRDS(indiv_data,"tests/testthat/indiv_data_2.RDS")
#saveRDS(dist_mat,"tests/testthat/dist_mat_2.RDS")
#saveRDS(full_indiv_data,"tests/testthat/full_indiv_data.RDS")
indiv_info<-indiv_info_add(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data=indiv_data)
#saveRDS(indiv_info,"tests/testthat/indiv_info_2.RDS")
net_info<-network_rewire_covariates(network=pop_mat,
indiv_data=indiv_data,prev_data=prev_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0,p_wr_e=0.5,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
#Behavioural timesteps
beh_steps<-20
#Demographic timesteps
dem_steps<-10
CG<-list()
OG<-list()
SW_store<-list()
inds_alive<-list()
pre_cap<-NULL
for(ds in 1:dem_steps){
inds_alive[[ds]]<-indiv_data$indivs
#Sample over some behaviour only time steps
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=beh_steps,float=0.000000001,pm=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
if(ds>1){
if(ds==2){
pre_cap_t<-sign(pre_cap[!is.na(pre_cap[,ds]),ds])
}
if(ds>2){
pre_cap_t<-sign(rowSums(pre_cap[!is.na(pre_cap[,ds]),2:ds],na.rm=TRUE))
}
pre_cap_t<-pre_cap_t[names(pre_cap_t)%in%indiv_data$indivs]
pre_cap_t2<-c(pre_cap_t,rep(0,sum(indiv_data$indivs%in%names(pre_cap_t)==FALSE)))
}
#Observe networks over these timesteps
if(ds==1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.75,pci=0.75,
start_obs=1,end_obs=max(samp_wind),interval_obs=2,
start_cap=1,end_cap=4,interval_cap=1,
pre_cap=NULL)
}
if(ds>1){
obs_info<-cap_and_obs(samp_wind=samp_wind,gbi=gbi,
pcg=0.5,pmi=0.75,pci=0.75,
start_obs=1,end_obs=max(samp_wind),interval_obs=2,
start_cap=1,end_cap=4,interval_cap=1,
pre_cap=pre_cap_t2)
}
captured_gbi<-obs_info[[1]]
captured_groups<-obs_info[[2]]
observed_gbi<-obs_info[[3]]
observed_groups<-obs_info[[4]]
if(ds==1){
pre_cap<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap)<-c("ID","cap")
}
if(ds>1){
pre_cap_t<-data.frame(indiv_data$indivs,sign(colSums(captured_gbi)))
names(pre_cap_t)<-c("ID","cap")
pre_cap<-merge(pre_cap,pre_cap_t,by="ID",all.x=TRUE,all.y=TRUE)
}
CG[[ds]]<-captured_gbi
OG[[ds]]<-observed_gbi
SW_store[[ds]]<-samp_wind
indiv_data<-basic_survival(indiv_data,mps=0.95,lvps=0.5)
#Demographic timestep
if(ds==1){
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=indiv_data,
mps=mean(indiv_data$survival),lvps=0.5)
}
if(ds>1){
new_info<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=full_indiv_data,
mps=mean(indiv_data$survival),lvps=0.5)
}
prev_data<-indiv_data
indiv_data<-new_info[[1]]
full_indiv_data<-new_info[[2]]
dist_mat<-new_info[[3]]
indiv_info<-indiv_info_add(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data=indiv_data)
net_info<-network_rewire_covariates(network=pop_mat,
indiv_data=indiv_data,prev_data=prev_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0,p_wr_e=0.5,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
}
#saveRDS(CG,"tests/testthat/CG_1.RDS")
#saveRDS(SW_store,"tests/testthat/SW_store_1.RDS")
#saveRDS(inds_alive,"tests/testthat/inds_alive_1.RDS")
#saveRDS(full_indiv_data,"tests/testthat/full_indiv_data_2.RDS")
devtools::test()
usethis::use_test("interaction_generation_seq")
indiv_data<-readRDS(test_path("fixtures","indiv_data_1.RDS"))
pop_mat<-readRDS(test_path("fixtures","pop_mat_1.RDS"))
interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs=c("rep","pois"),
pm=20,float=0.00001)
t_res<-interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs=c("rep","pois"),
pm=20,float=0.00001)
t_res<-interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs=c("rep"),
pm=20,float=0.00001)
t_res<-interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs="rep",
pm=20,float=0.00001)
style_gs<-"rep"
style_gs%in%c("rep","pois")
t_res<-interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs="rep",
pm=20,float=0.00001)
style_gs%in%c("rep","pois")==FALSE
t_res<-genNetDem::interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs="rep",
pm=20,float=0.00001)
#'interaction_generation_seq
#'
#'Generates a sequential series of groups
#'
#'@param pop_mat adjacency matrix of underlying social network
#'@param indiv_data indiv_data dataframe including information on IDs, group membership and spatial locations
#'@param ne number of groups
#'@param mgs mean group size
#'@param style_gs group size distribution. Currently either identical (style_gs=”rep”) or Poisson (style_gs=”pois”).
#'@param pm used in jpc to adjust social network connection strengths to probabilities of being sampled in the same group. Defaults to 20
#'@param float used in jpc to provide a minimum probability of being sampled in the same group to allow all groups to be filled. Defaults to 0.0001
#'
#'@details Generates a sequential series of groups (c.f. interaction_generation_simul), whereby each group occurs at a different timestep so can contains overlapping sets of individuals.
#'
#'@return The GBI generated by the function
#'
#'@export
interaction_generation_seq<-function(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs=c("rep","pois"),
pm=20,float=0.00001){
if(is.data.frame(indiv_data)==FALSE){stop("Correctly formatted indiv_data is required")}
if(ncol(indiv_data)%in%c(4,5)==FALSE){stop("Correctly formatted indiv_data is required")}
if(style_gs%in%c("rep","pois")==FALSE){stop("style_gs must be either 'rep' or 'pois'")}
if(is.matrix(pop_mat)==FALSE){stop("Network must be in adjacency matrix format")}
if(dim(pop_mat)[1]!=dim(pop_mat)[2]){stop("Adjacency matrix not square")}
if(ne<1){stop("number of events must be 1 or more")}
if(mgs<0){stop("mean group size must be greater than zero")}
if(float<0){stop("float must be greater than zero")}
if(pm<0){stop("pm must be greater than zero")}
if(float>0.01){warning("Float value is high. Interactions unlikely to be strongly linked to underlying network")}
if(style_gs=="rep"){
gs<-rep(mgs,ne)
}
if(style_gs=="pois"){
gs<-stats::rpois(ne,5)
}
n<-nrow(pop_mat)
gbi<-matrix(0,nrow=ne,ncol=n)
for(i in 1:ne){
t_g<-numeric()
t_g[1]<-sample(indiv_data$indivs,1,replace=FALSE)
for(j in 2:gs[i]){
can_join<-indiv_data$indivs[-which(indiv_data$indivs%in%t_g)]
t_mat<-pop_mat[t_g,can_join]
if(is.vector(t_mat)){
join_probs<-t_mat+float
} else{
join_probs<-apply(t_mat,2,jpc,pm=pm,float=float)
}
if(length(can_join)>1){
t_g[j]<-sample(can_join,1,replace=FALSE,prob=join_probs)
}
if(length(can_join)==1){
t_g[j]<-can_join
}
}
gbi[i,t_g]<-1
}
return(gbi)
}
t_res<-interaction_generation_seq(pop_mat,indiv_data,
ne=1000,mgs=2,style_gs="rep",
pm=20,float=0.00001)
t_res
length(t_res)
dim(t_res)
t_res<-interaction_generation_seq(pop_mat,indiv_data,
ne=100,mgs=2,style_gs="rep",
pm=20,float=0.00001)
dim(t_res)
rowSums(t_res)
unique(t_res)
unique(as.vector(t_res))
2<=2
3<=2
devtools::test()
devtools::test()
usethis::use_test("interaction_generation_simul")
t_res<-genNetDem::interaction_generation_simul(pop_mat,indiv_data,
mean_group_size=2,n_ts=10,
pm=0,float=0.00001,pow=4)
indiv_data<-readRDS(test_path("fixtures","indiv_data_1.RDS"))
pop_mat<-readRDS(test_path("fixtures","pop_mat_1.RDS"))
t_res<-genNetDem::interaction_generation_simul(pop_mat,indiv_data,
mean_group_size=2,n_ts=10,
pm=0,float=0.00001,pow=4)
t_res<-genNetDem::interaction_generation_simul(pop_mat=pop_mat,indiv_data=indiv_data,
mean_group_size=2,n_ts=10,
pm=0,float=0.00001,pow=4)
t_res<-genNetDem::interaction_generation_simul(pop_mat=pop_mat,indiv_data=indiv_data,
mean_group_size=2,n_ts=10,
pm=50,float=0.00001,pow=4)
t_res<-genNetDem::interaction_generation_simul(pop_mat=pop_mat,indiv_data=indiv_data,
mean_group_size=2,n_ts=10,
pm=50,float=0.00001,pow=4)
t_res
rowSums(t_res)
rowSums(t_res[[1]])
unique(rowSums(t_res[[1]])
)
sum(unique(rowSums(t_res[[1]]))<=0)
sort(unique(as.vector(t_res[[1]])))
sort(unique(t_res[[2]]))
length(t_res[[2]])
nrow(t_res[[1]])
devtools::test()
devtools::test()
usethis::use_test()
usethis::use_test("network_generation_basic")
indiv_data<-readRDS(test_path("fixtures","indiv_data_1.RDS"))
dist_mat<-readRDS(test_path("fixtures","dist_mat_1.RDS"))
rbeta(0,1)
rbeta(1,0,1)
rbeta(100,0,1)
rbeta(100,1,1)
rbeta(100,0,10)
t_res<-genNetDem::network_generation_basic(indiv_data=indiv_data,dist_mat=dist_mat,
p_ig=0.2,w_ig1=1.5,w_ig2=5,
p_og=0.2,w_og1=1,w_og2=5,
d_effp=4,d_effw=4,
plot=FALSE)
t_res
class(t_res[[2]])
class(t_res[[1]])
isSymmetric(t_res[[1]])
devtools::test()
devtools::test()
usethis::use_test("network_generation_covariates")
effs[[1]]<-matrix(0,nr=2,nc=8)
indiv_data<-readRDS(test_path("fixtures","indiv_data_1.RDS"))
dist_mat<-readRDS(test_path("fixtures","dist_mat_1.RDS"))
indiv_info<-readRDS(test_path("fixtures","indiv_info_1.RDS"))
effs<-list()
effs[[1]]<-matrix(0,nr=2,nc=8)
effs[[2]][2,]<-c(0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2)
indiv_data<-readRDS(test_path("fixtures","indiv_data_1.RDS"))
dist_mat<-readRDS(test_path("fixtures","dist_mat_1.RDS"))
indiv_info<-readRDS(test_path("fixtures","indiv_info_1.RDS"))
effs<-list()
effs[[1]]<-matrix(0,nr=2,nc=8)
effs[[1]][2,]<-c(0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2)
effs
logit(0.025)
boot::logit(0.025)
t_res<-network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
t_res
class(t_res[[1]])
class(t_res[[2]])
dim(t_res[[1]])[1]
dim(t_res[[1]])[2]
sum(t_res[[1]]<0|t_res[[1]]>1)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
indiv_data<-readRDS(test_path("fixtures","indiv_data_1.RDS"))
dist_mat<-readRDS(test_path("fixtures","dist_mat_1.RDS"))
indiv_info<-readRDS(test_path("fixtures","indiv_info_1.RDS"))
effs<-list()
effs[[1]]<-matrix(0,nr=2,nc=8)
effs[[1]][2,]<-c(0.2,0.2,0,0.2,0.2,0,1,1)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=-0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=-0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=1.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=1.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=-0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.26,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=-0.025,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.26,
d_effp=4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=-4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
genNetDem::network_generation_covariates(indiv_data=indiv_data,dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=-4,d_effw=4,
covs=2,effs=effs,
plot=FALSE)
devtools::test()
devtools::test()
usethis::use_test("network_rewire_covariates")
prev_data<-readRDS(test_path("fixtures","indiv_data_1a.RDS"))
indiv_data<-readRDS(test_path("fixtures","indiv_data_2.RDS"))
dist_mat<-readRDS(test_path("fixtures","dist_mat_2.RDS"))
network<-readRDS(test_path("fixtures","pop_mat_1.RDS"))
indiv_info<-readRDS(test_path("fixtures","indiv_info_2.RDS"))
effs<-list()
effs[[1]]<-matrix(c(0,0,0,1,1,1,0,0),nr=1,nc=8)
effs[[1]]<-rbind(rep(0,8),effs[[1]])
network_rewire_covariates(network=network,
indiv_data=indiv_data,prev_data=prev_data,
dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0.2,p_wr_e=0.5,
plot=FALSE)
t_res<-network_rewire_covariates(network=network,
indiv_data=indiv_data,prev_data=prev_data,
dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0.2,p_wr_e=0.5,
plot=FALSE)
class(t_res[[1]])
class(t_res[[2]])
dim(t_res[[1]])[1]
nrow(indiv_data)
as.numeric(isSymmetric(t_res[[1]]))
sum(t_res[[1]]<0|t_res[[1]]>1)
devtools::test()
devtools::test()
devtools::test()
genNetDem::network_rewire_covariates(network=network,
indiv_data=indiv_data,prev_data=prev_data,
dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.26,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0.2,p_wr_e=0.5,
plot=FALSE)
devtools::test()
genNetDem::network_rewire_covariates(network=network,
indiv_data=indiv_data,prev_data=prev_data,
dist_mat=dist_mat,indiv_info=indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.26,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=2,effs,
p_wr_i=0.2,p_wr_e=0.5,
plot=FALSE)
devtools::test()
devtools::test()
usethis::use_test("timestep_demographics")
indiv_data<-readRDS(test_path("fixtures","indiv_data_2.RDS"))
full_indiv_data<-readRDS(test_path("fixtures","full_indiv_data_1.RDS"))
full_indiv_data<-readRDS(test_path("fixtures","full_indiv_data.RDS"))
timestep_demographics(indiv_data=indiv_data,full_indiv_data=full_indiv_data,
recruitment=TRUE,
mps=0.95,lvps=0.5)
t_res<-timestep_demographics(indiv_data=indiv_data,full_indiv_data=full_indiv_data,
recruitment=TRUE,
mps=0.8,lvps=0.5)
length(t_res)
dim(t_res[[3]])[1]
nrow(t_res[[1]])
as.numeric(isSymmetric(t_res[[3]]))
sum(t_res[[3]]<0|t_res[[3]]>1)
t_res[[3]]<0
sum(t_res[[3]]<0)
devtools::test()
