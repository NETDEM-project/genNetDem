start_cap=1,end_cap=4,interval_cap=1)
captured_gbi<-obs_info[[1]]
captured_groups<-obs_info[[2]]
observed_gbi<-obs_info[[3]]
observed_groups<-obs_info[[4]]
obs_net_checker(observed_gbi,asnipe::get_network(gbi),pop_mat)
#'obs_net_checker
#'
#'Generates observations that can be used to generate CMR data and observed social networks.
#'
#'@param gbi_o observed group-by-individual matrix
#'@param full_mat adjacency matrix for the social network generated from grouping events
#'@param pop_mat adjacency matrix for the underlying network
#'@details A series of checks of how well the observed network mtaches the actual and underlying networks
#'@return 1) A plot of the observed network; 2) Correlation with the actual network; 3) Correlation with the underlying network; 4) Correlations of key centrality measures between the observed and actual network
#'
#'@export
obs_net_checker<-function(gbi_o,full_mat,pop_mat){
gbi_o<-gbi_o[rowSums(gbi_o)>0,]
obs_mat<-asnipe::get_network(gbi_o)
obs_net<-igraph::graph.adjacency(obs_mat,mode="undirected",weighted=TRUE)
#Plot network
graphics::par(mar=c(0,0,0,0),mfrow=c(1,1))
plot(obs_net,vertex.label=NA,vertex.size=8,edge.width=(igraph::E(obs_net)$weight*2)^1.5)
#Check correlation with actual network
cor_check<-sna::netlm(obs_mat,full_mat,nullhyp="qapspp")
summary(cor_check)
#Check correlation with underlying network
cor_check2<-sna::netlm(obs_mat,pop_mat,nullhyp="qapspp")
summary(cor_check2)
full_net<-igraph::graph.adjacency(full_mat,mode="undirected",weighted = TRUE)
#Plot centrality correlations with actual network
graphics::par(mfrow=c(2,2))
graphics::par(mar=c(5,5,2,2))
plot(igraph::degree(obs_net)~igraph::degree(full_net))
plot(igraph::strength(obs_net)~igraph::strength(full_net))
plot(igraph::betweenness(obs_net,weights=1/igraph::E(obs_net)$weight)~igraph::betweenness(full_net,weights=1/igraph::E(full_net)$weight))
plot(igraph::closeness(obs_net,weights=1/igraph::E(obs_net)$weight)~igraph::closeness(full_net,weights=1/igraph::E(full_net)$weight))
}
obs_net_checker(observed_gbi,asnipe::get_network(gbi),pop_mat)
#'obs_net_checker
#'
#'Generates observations that can be used to generate CMR data and observed social networks.
#'
#'@param gbi_o observed group-by-individual matrix
#'@param full_mat adjacency matrix for the social network generated from grouping events
#'@param pop_mat adjacency matrix for the underlying network
#'@details A series of checks of how well the observed network mtaches the actual and underlying networks
#'@return 1) A plot of the observed network; 2) Correlation with the actual network; 3) Correlation with the underlying network; 4) Correlations of key centrality measures between the observed and actual network
#'
#'@export
obs_net_checker<-function(gbi_o,full_mat,pop_mat){
gbi_o<-gbi_o[rowSums(gbi_o)>0,]
obs_mat<-asnipe::get_network(gbi_o)
obs_net<-igraph::graph.adjacency(obs_mat,mode="undirected",weighted=TRUE)
#Plot network
graphics::par(mar=c(0,0,0,0),mfrow=c(1,1))
plot(obs_net,vertex.label=NA,vertex.size=8,edge.width=(igraph::E(obs_net)$weight*2)^1.5)
#Check correlation with actual network
cor_check<-sna::netlm(obs_mat,full_mat,nullhyp="qapspp")
print(summary(cor_check))
#Check correlation with underlying network
cor_check2<-sna::netlm(obs_mat,pop_mat,nullhyp="qapspp")
print(summary(cor_check2))
full_net<-igraph::graph.adjacency(full_mat,mode="undirected",weighted = TRUE)
#Plot centrality correlations with actual network
graphics::par(mfrow=c(2,2))
graphics::par(mar=c(5,5,2,2))
plot(igraph::degree(obs_net)~igraph::degree(full_net))
plot(igraph::strength(obs_net)~igraph::strength(full_net))
plot(igraph::betweenness(obs_net,weights=1/igraph::E(obs_net)$weight)~igraph::betweenness(full_net,weights=1/igraph::E(full_net)$weight))
plot(igraph::closeness(obs_net,weights=1/igraph::E(obs_net)$weight)~igraph::closeness(full_net,weights=1/igraph::E(full_net)$weight))
}
obs_net_checker(observed_gbi,asnipe::get_network(gbi),pop_mat)
library(genNetDem)
library(genNetDem)
library(genNetDem)
devtools::build_vignettes()
?devtools::build_vignettes
?dev_tools::use_vignette
?devtools::use_vignette
devtools::build_vignettes(package="genNetDem")
devtools::build_vignettes(pkg="genNetDem")
devtools::build_vignettes(pkg=genNetDem)
devtools::build_vignettes(pkg="~/NETDEM/genNetDem")
devtools::build_vignettes(pkg="~/Documents/NETDEM/genNetDem")
devtools::build_vignettes(pkg="~/Documents/GitHub/NETDEM/genNetDem")
devtools::build_vignettes()
library(genNetDem)
devtools::build_vignettes()
library(genNetDem)
vignette(package=genNetDem)
vignette(package="genNetDem")
usethis::use_vignette("my-vignette")
usethis::use_vignette("usinggenNetDem")
library(genNetDem)
browseVignettes("genNetDem")
devtools::build()
browseVignettes("genNetDem")
browseVignettes(genNetDem)
vignette(package="genNetDem")
?browseVignettes
browseVignettes()
library(genNetDem)
browseVignettes()
devtools::build_vignettes()
browseVignettes()
devtools::build()
library(genNetDem)
browseVignettes()
vignette(package=genNetDem)
vignette(package="genNetDem")
devtools::install(build_vignettes = TRUE)
library(genNetDem)
browseVignettes
browseVignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment="#>",
fig.align="center",
fig.width=8,
fig.height=6)
library(genNetDem)
library(asnipe)
#Generate population
pop_info<-genNetDem::population_generation_basic(n=100,ng=100)
indiv_data<-pop_info[[1]]
dist_mat<-pop_info[[2]]
indiv_info<-data.frame(indiv_data$indivs)
indiv_info<-genNetDem::indiv_info_gen(indiv_info,ii_tag=NULL,indiv_data=indiv_data,trait="sex",trait_type="fac",level_names=c("M","F"))
indiv_info<-genNetDem::indiv_info_gen(indiv_info[[1]],ii_tag=indiv_info[[2]],indiv_data,trait="size",trait_type="cov",x_dist="norm")
net_info<-network_generation_basic(indiv_data=indiv_data,dist_mat=dist_mat,
p_ig=0.2,w_ig1=1.5,w_ig2=5,
p_og=0.2,w_og1=1,w_og2=5,
d_effp=4,d_effw=4,
plot=TRUE)
effs<-list()
effs[[1]]<-matrix(c(0,0,0,1,1,1,0,0),nr=1,nc=8)
effs[[1]]<-rbind(rep(0,8),effs[[1]])
effs[[2]]<-matrix(c(0,0,0,0,0,0,-0.5,-0.5),nr=1,nc=8)
net_info<-network_generation_covariates(indiv_data,dist_mat,indiv_info,
p_ig=0.2,wi_m=0.25,wi_v=0.025,
p_og=0.2,wo_m=0.25,wo_v=0.025,
d_effp=4,d_effw=4,
covs=c(2,3),effs=effs,
plot=TRUE)
pop_mat<-net_info[[1]]
pop_net<-net_info[[2]]
boxplot(igraph::strength(pop_net)~indiv_info[[1]][,2],xlab="Sex",ylab="Strength",las=1)
#Generate association data
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=20,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
#Generate association data
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=10,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
network_checker_simul<-function(gbi,pop_net){
gbi2<-gbi
full_mat<-get_network2(gbi2)
full_net<-graph.adjacency(full_mat,mode="undirected",weighted=TRUE)
#Plot network
par(mar=c(0,0,0,0),mfrow=c(1,1))
plot(full_net,vertex.label=NA,vertex.size=8,edge.width=(E(full_net)$weight*2)^1.5)
#Check correlation between networks
cor_check<-netlm(full_mat,pop_mat,nullhyp="qapspp")
print(summary(cor_check))
#Plot correlation between centrality measures from underlying network
#and that derived from groups/interactions
par(mfrow=c(2,2))
par(mar=c(5,5,2,2))
plot(igraph::degree(full_net)~igraph::degree(pop_net))
plot(igraph::strength(full_net)~igraph::strength(pop_net))
plot(igraph::betweenness(full_net,weights=1/E(full_net)$weight)~igraph::betweenness(pop_net,weights=1/E(pop_net)$weight))
plot(igraph::closeness(full_net,weights=1/E(full_net)$weight)~igraph::closeness(pop_net,weights=1/E(pop_net)$weight))
}
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
##Load original package
library(asnipe)
##Adapted function
get_network2<-function (association_data, data_format = "GBI", association_index = "SRI",
identities = NULL, which_identities = NULL, times = NULL,
occurrences = NULL, locations = NULL, which_locations = NULL,
start_time = NULL, end_time = NULL, classes = NULL, which_classes = NULL,
enter_time = NULL, exit_time = NULL)
{
if (is.null(association_data)) {
stop("No association_data data!")
}
if (length(dim(association_data)) != 2 & data_format == "GBI") {
stop("Invalid dimensions for association_data")
}
if (length(dim(association_data)) != 3 & data_format == "SP") {
stop("Invalid dimensions for association_data")
}
if ((length(identities) != ncol(association_data) & !is.null(identities)) ==
TRUE) {
stop("Length of identities does not match number of individuals")
}
if ((length(times) != nrow(association_data) & !is.null(times)) ==
TRUE) {
stop("Length of times does not match number of groups")
}
if ((length(occurrences[1, ]) != nrow(association_data) &
!is.null(occurrences)) == TRUE) {
stop("Number of occurrence periods does not match number of sampling periods")
}
if ((length(occurrences[, 1]) != ncol(association_data) &
!is.null(occurrences)) == TRUE) {
stop("Number of individuals in occurrences does not match number of individuals in sampling periods")
}
if ((length(locations) != nrow(association_data) & !is.null(locations)) ==
TRUE) {
stop("Length of locations does not match number of groups")
}
if ((length(classes) != ncol(association_data) & !is.null(classes)) ==
TRUE) {
stop("Length of classes does not match number of individuals")
}
if ((!is.null(which_identities) & is.null(identities)) ==
TRUE) {
stop("Cannot apply which_identities without identities data")
}
if ((!is.null(which_locations) & is.null(locations)) == TRUE) {
stop("Cannot apply which_locations without locations data")
}
if ((!is.null(start_time) & is.null(times)) == TRUE) {
stop("Cannot apply start_time without times data")
}
if ((!is.null(end_time) & is.null(times)) == TRUE) {
stop("Cannot apply end_time without times data")
}
if ((!is.null(which_classes) & is.null(classes)) == TRUE) {
stop("Cannot apply which_class without classes data")
}
if ((!is.null(enter_time) & is.null(times)) == TRUE) {
stop("Cannot control for overlapping time without observation times")
}
if ((!is.null(exit_time) & is.null(times)) == TRUE) {
stop("Cannot control for overlapping time without observation times")
}
if (!is.null(colnames(association_data)) & !all(colnames(association_data) ==
identities)) {
stop("Identities is not in the same order as columns in association_data")
}
if (!any(association_index %in% c("SRI", "HWI"))) {
stop("Unknown association_index")
}
if (data_format == "GBI") {
association_data <- as.matrix(association_data)
}
else {
association_data <- as.array(association_data)
}
if (!is.null(which_identities)) {
if (data_format == "GBI")
association_data <- association_data[, which(identities %in%
which_identities)]
if (data_format == "SP")
association_data <- association_data[, which(identities %in%
which_identities), which(identities %in% which_identities)]
identities <- identities[which(identities %in% which_identities)]
}
if (!is.null(start_time) & is.null(end_time)) {
end_time <- max(times)
}
if (!is.null(end_time) & is.null(start_time)) {
start_time <- min(times)
}
if (!is.null(start_time) & !is.null(end_time)) {
subs <- which(times >= start_time & times <= end_time)
if (data_format == "GBI")
association_data <- association_data[subs, ]
if (data_format == "SP")
association_data <- association_data[subs, , ]
locations <- locations[subs]
times <- times[subs]
}
if (!is.null(which_locations)) {
subs <- which(locations %in% which_locations)
if (data_format == "GBI")
association_data <- association_data[subs, ]
if (data_format == "SP")
association_data <- association_data[subs, , ]
locations <- locations[subs]
times <- times[subs]
}
if (!is.null(which_classes)) {
if (data_format == "GBI")
association_data <- association_data[, which(classes %in%
which_classes)]
if (data_format == "SP")
association_data <- association_data[, which(classes %in%
which_classes), which(classes %in% which_classes)]
identities <- identities[which(classes %in% which_classes)]
}
do.SR <- function(GroupBy, input, association_index, present) {
jumps <- c(seq(0, ncol(input), 50))
if (max(jumps) < ncol(input)) {
jumps <- c(jumps, ncol(input))
}
out <- matrix(nrow = 0, ncol = 1)
for (i in 1:(length(jumps) - 1)) {
tmp <- input[, GroupBy] + input[, (jumps[i] + 1):jumps[i +
1]]
if (length(tmp) > nrow(input)) {
x <- colSums(tmp == 2)
}
else {
x <- sum(tmp == 2)
}
if (length(tmp) > nrow(input)) {
yab <- colSums(tmp == 1)
}
else {
yab <- sum(tmp == 1)
}
if (association_index == "SRI") {
out <- c(out, x/(x + yab))
}
else if (association_index == "HWI") {
out <- c(out, x/(x + 0.5 * yab))
}
}
out
}
do.SR.time <- function(GroupBy, input, association_index,
times, present) {
jumps <- c(seq(0, ncol(input), 50))
if (max(jumps) < ncol(input)) {
jumps <- c(jumps, ncol(input))
}
out <- matrix(nrow = 0, ncol = 1)
for (i in 1:(length(jumps) - 1)) {
tmp <- input[, GroupBy] + input[, (jumps[i] + 1):jumps[i +
1], drop = FALSE]
if (!is.null(enter_time) | !is.null(exit_time)) {
tmp2 <- present[, GroupBy] + present[, (jumps[i] +
1):jumps[i + 1], drop = FALSE]
tmp[which(tmp2 < 2, arr.ind = T)] <- 0
}
if (length(tmp) > nrow(input)) {
x <- colSums(tmp == 2)
yab <- apply(tmp, 2, function(x) {
sum(table(times[x == 1]) == 2)
})
y <- colSums(tmp == 1) - (2 * yab)
}
else {
x <- sum(tmp == 2)
yab <- sum(table(times[tmp == 1]) == 2)
y <- sum(tmp == 1) - (2 * yab)
}
if (association_index == "SRI") {
out <- c(out, x/(x + y + yab))
}
else if (association_index == "HWI") {
out <- c(out, x/(x + y + 0.5 * yab))
}
}
out
}
do.SR2 <- function(i, a, association_index) {
x <- apply(a[, i, ], 2, sum)
n <- apply(a, 1, rowSums)
n[n > 0] <- 1
seen <- t(apply(n, 1, function(x) x - n[i, ]))
ya <- rowSums(seen < 0)
yb <- rowSums(seen > 0)
seen <- t(apply(n, 1, function(x) x + n[i, ]))
yab <- rowSums(seen > 1) - x
if (association_index == "SRI") {
out <- x/(x + ya + yb + yab)
}
else if (association_index == "HWI") {
out <- x/(x + ya + yb + 0.5 * yab)
}
return(out)
}
do.SR2.occurrences <- function(i, a, association_index, occurrences) {
x <- apply(a[, i, ], 2, sum)
seen <- sweep(occurrences, 2, occurrences[i, ], "+")
yab <- rowSums(seen == 2) - x
ya_b <- rowSums(seen == 1)
if (association_index == "SRI") {
out <- x/(x + ya_b + yab)
}
else if (association_index == "HWI") {
out <- x/(x + ya_b + 0.5 * yab)
}
return(out)
}
if (!is.null(enter_time) | !is.null(exit_time)) {
present <- matrix(1, nrow(association_data), ncol(association_data))
}
else {
present <- NA
}
if (!is.null(enter_time)) {
for (i in 1:ncol(present)) {
present[which(times < enter_time[i]), i] <- 0
}
}
if (!is.null(exit_time)) {
for (i in 1:ncol(present)) {
present[which(times > exit_time[i]), i] <- 0
}
}
if (data_format == "GBI" & is.null(times))
fradj_sorted <- do.call("rbind", lapply(seq(1,
ncol(association_data), 1), FUN = do.SR, input = association_data,
association_index))
if (data_format == "GBI" & !is.null(times))
fradj_sorted <- do.call("rbind", lapply(seq(1,
ncol(association_data), 1), FUN = do.SR.time, input = association_data,
association_index, times, present))
if (data_format == "SP" & is.null(occurrences))
fradj_sorted <- do.call("rbind", lapply(seq(1,
ncol(association_data), 1), FUN = do.SR2, a = association_data,
association_index))
if (data_format == "SP" & !is.null(occurrences))
fradj_sorted <- do.call("rbind", lapply(seq(1,
ncol(association_data), 1), FUN = do.SR2.occurrences,
a = association_data, association_index, occurrences))
fradj_sorted[is.nan(fradj_sorted)] <- 0
diag(fradj_sorted) <- 0
if (!is.null(identities)) {
colnames(fradj_sorted) <- identities
rownames(fradj_sorted) <- identities
}
else if (!is.null(colnames(association_data))) {
colnames(fradj_sorted) <- colnames(association_data)
rownames(fradj_sorted) <- colnames(association_data)
}
return(fradj_sorted)
}
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
library(igraph)
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
library(sna)
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
#Generate association data
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=2,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
pop_net
as.matrix(pop_net)
as.matrix(pop_net,sparse=FALSE)
gbi2<-gbi
full_mat<-asnipe::get_network(gbi2)
full_mat
full_net<-igraph::graph.adjacency(full_mat,mode="undirected",weighted=TRUE)
#Plot network
graphics::par(mar=c(0,0,0,0),mfrow=c(1,1))
plot(full_net,vertex.label=NA,vertex.size=8,edge.width=(igraph::E(full_net)$weight*2)^1.5)
pop_mat<-igraph::as_adjacency_matrix(pop_net,sparse=FALSE,attr="weight")
#Check correlation between networks
cor_check<-sna::netlm(full_mat,pop_mat,nullhyp="qapspp")
summary(cor_check)
#Generate association data
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=2,
float=0.000000001,par=500,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
#Generate association data
int_info<-interaction_generation_simul(indiv_data=indiv_data,pop_mat=pop_mat,
mean_group_size=2,n_ts=50,
float=0.000000001,par=50,pow=4)
gbi<-int_info[[1]]
samp_wind<-int_info[[2]]
#Check networks produced
network_checker_simul(gbi=gbi,pop_net=pop_net)
(0+1+1+2/3+1/2)/5
(1/3+1/3+2/5)/3
sd(c(1/3,1/3,2/5))
mean(c(1/3,1/3,2/5))
sd(c(0,1,1,2/3,1/2))
mean(c(0,1,1,2/3,1/2))
devtools::check(genNetDem)
roxygen2::roxygenise()
testthat::use_description()
usethis::use_description()
0.807/0.895
remotes::install_github("matthewsilk/NETDEM",subdir="genNetDem", build_vignettes = FALSE)
remotes::install_github("matthewsilk/NETDEM",subdir="genNetDem",ref="main", build_vignettes = FALSE)
remotes::install_github("matthewsilk/NETDEM",subdir="genNetDem",ref="main", build_vignettes = FALSE)
remotes::install_github("matthewsilk/NETDEM",subdir="genNetDem",ref="main", build_vignettes = FALSE,force=TRUE)
remotes::install_github("matthewsilk/NETDEM", build_vignettes = FALSE,force=TRUE)
install.packages("githubinstall")
githubinstall::githubistall("genNetDem")
?githubinstall::githubistall
githubinstall::githubinstall("genNetDem")
remotes::install_github("NETDEM-project/genNetDem", build_vignettes = FALSE)
